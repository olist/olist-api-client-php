<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * olist-api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return DefaultApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation itemsBySkuList
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $limit  (optional)
     * @param string $ordering  (optional)
     * @param string $search  (optional)
     * @param string $offset  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function itemsBySkuList($authorization, $limit = null, $ordering = null, $search = null, $offset = null)
    {
        list($response) = $this->itemsBySkuListWithHttpInfo($authorization, $limit, $ordering, $search, $offset);
        return $response;
    }

    /**
     * Operation itemsBySkuListWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $limit  (optional)
     * @param string $ordering  (optional)
     * @param string $search  (optional)
     * @param string $offset  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function itemsBySkuListWithHttpInfo($authorization, $limit = null, $ordering = null, $search = null, $offset = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling itemsBySkuList');
        }
        // parse inputs
        $resourcePath = "/items-by-sku";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = $this->apiClient->getSerializer()->toQueryValue($ordering);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/items-by-sku'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation productGroupsCreate
     *
     * 
     *
     * @param string $authorization  (required)
     * @param \Swagger\Client\Model\MODELeaf0a6 $mode_leaf0a6  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function productGroupsCreate($authorization, $mode_leaf0a6)
    {
        list($response) = $this->productGroupsCreateWithHttpInfo($authorization, $mode_leaf0a6);
        return $response;
    }

    /**
     * Operation productGroupsCreateWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param \Swagger\Client\Model\MODELeaf0a6 $mode_leaf0a6  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productGroupsCreateWithHttpInfo($authorization, $mode_leaf0a6)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling productGroupsCreate');
        }
        // verify the required parameter 'mode_leaf0a6' is set
        if ($mode_leaf0a6 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mode_leaf0a6 when calling productGroupsCreate');
        }
        // parse inputs
        $resourcePath = "/product-groups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($mode_leaf0a6)) {
            $_tempBody = $mode_leaf0a6;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/product-groups'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation productGroupsDelete
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function productGroupsDelete($authorization, $id)
    {
        list($response) = $this->productGroupsDeleteWithHttpInfo($authorization, $id);
        return $response;
    }

    /**
     * Operation productGroupsDeleteWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productGroupsDeleteWithHttpInfo($authorization, $id)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling productGroupsDelete');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling productGroupsDelete');
        }
        // parse inputs
        $resourcePath = "/product-groups/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/product-groups/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation productGroupsList
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $limit  (optional)
     * @param string $ordering  (optional)
     * @param string $search  (optional)
     * @param string $offset  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function productGroupsList($authorization, $limit = null, $ordering = null, $search = null, $offset = null)
    {
        list($response) = $this->productGroupsListWithHttpInfo($authorization, $limit, $ordering, $search, $offset);
        return $response;
    }

    /**
     * Operation productGroupsListWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $limit  (optional)
     * @param string $ordering  (optional)
     * @param string $search  (optional)
     * @param string $offset  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productGroupsListWithHttpInfo($authorization, $limit = null, $ordering = null, $search = null, $offset = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling productGroupsList');
        }
        // parse inputs
        $resourcePath = "/product-groups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = $this->apiClient->getSerializer()->toQueryValue($ordering);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/product-groups'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation productGroupsPartialUpdate
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $id  (required)
     * @param \Swagger\Client\Model\MODELf585b9 $mode_lf585b9  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function productGroupsPartialUpdate($authorization, $id, $mode_lf585b9)
    {
        list($response) = $this->productGroupsPartialUpdateWithHttpInfo($authorization, $id, $mode_lf585b9);
        return $response;
    }

    /**
     * Operation productGroupsPartialUpdateWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $id  (required)
     * @param \Swagger\Client\Model\MODELf585b9 $mode_lf585b9  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productGroupsPartialUpdateWithHttpInfo($authorization, $id, $mode_lf585b9)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling productGroupsPartialUpdate');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling productGroupsPartialUpdate');
        }
        // verify the required parameter 'mode_lf585b9' is set
        if ($mode_lf585b9 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mode_lf585b9 when calling productGroupsPartialUpdate');
        }
        // parse inputs
        $resourcePath = "/product-groups/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($mode_lf585b9)) {
            $_tempBody = $mode_lf585b9;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/product-groups/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation productGroupsRead
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function productGroupsRead($authorization, $id)
    {
        list($response) = $this->productGroupsReadWithHttpInfo($authorization, $id);
        return $response;
    }

    /**
     * Operation productGroupsReadWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productGroupsReadWithHttpInfo($authorization, $id)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling productGroupsRead');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling productGroupsRead');
        }
        // parse inputs
        $resourcePath = "/product-groups/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/product-groups/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation productGroupsUpdate
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $id  (required)
     * @param \Swagger\Client\Model\MODEL0cb980 $model0cb980  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function productGroupsUpdate($authorization, $id, $model0cb980)
    {
        list($response) = $this->productGroupsUpdateWithHttpInfo($authorization, $id, $model0cb980);
        return $response;
    }

    /**
     * Operation productGroupsUpdateWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $id  (required)
     * @param \Swagger\Client\Model\MODEL0cb980 $model0cb980  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productGroupsUpdateWithHttpInfo($authorization, $id, $model0cb980)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling productGroupsUpdate');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling productGroupsUpdate');
        }
        // verify the required parameter 'model0cb980' is set
        if ($model0cb980 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $model0cb980 when calling productGroupsUpdate');
        }
        // parse inputs
        $resourcePath = "/product-groups/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($model0cb980)) {
            $_tempBody = $model0cb980;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/product-groups/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation productsCreate
     *
     * 
     *
     * @param string $authorization  (required)
     * @param \Swagger\Client\Model\MODELc30ccf $mode_lc30ccf  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function productsCreate($authorization, $mode_lc30ccf)
    {
        list($response) = $this->productsCreateWithHttpInfo($authorization, $mode_lc30ccf);
        return $response;
    }

    /**
     * Operation productsCreateWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param \Swagger\Client\Model\MODELc30ccf $mode_lc30ccf  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productsCreateWithHttpInfo($authorization, $mode_lc30ccf)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling productsCreate');
        }
        // verify the required parameter 'mode_lc30ccf' is set
        if ($mode_lc30ccf === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mode_lc30ccf when calling productsCreate');
        }
        // parse inputs
        $resourcePath = "/template/products";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($mode_lc30ccf)) {
            $_tempBody = $mode_lc30ccf;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/template/products'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation productsDelete
     *
     * 
     *
     * @param string $gtin  (required)
     * @param string $authorization  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function productsDelete($gtin, $authorization)
    {
        list($response) = $this->productsDeleteWithHttpInfo($gtin, $authorization);
        return $response;
    }

    /**
     * Operation productsDeleteWithHttpInfo
     *
     * 
     *
     * @param string $gtin  (required)
     * @param string $authorization  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productsDeleteWithHttpInfo($gtin, $authorization)
    {
        // verify the required parameter 'gtin' is set
        if ($gtin === null) {
            throw new \InvalidArgumentException('Missing the required parameter $gtin when calling productsDelete');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling productsDelete');
        }
        // parse inputs
        $resourcePath = "/template/products/{gtin}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($gtin !== null) {
            $resourcePath = str_replace(
                "{" . "gtin" . "}",
                $this->apiClient->getSerializer()->toPathValue($gtin),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/template/products/{gtin}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation productsList
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $limit  (optional)
     * @param string $gtin  (optional)
     * @param string $name__icontains  (optional)
     * @param string $name  (optional)
     * @param string $offset  (optional)
     * @param string $ordering  (optional)
     * @param string $search  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function productsList($authorization, $limit = null, $gtin = null, $name__icontains = null, $name = null, $offset = null, $ordering = null, $search = null)
    {
        list($response) = $this->productsListWithHttpInfo($authorization, $limit, $gtin, $name__icontains, $name, $offset, $ordering, $search);
        return $response;
    }

    /**
     * Operation productsListWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $limit  (optional)
     * @param string $gtin  (optional)
     * @param string $name__icontains  (optional)
     * @param string $name  (optional)
     * @param string $offset  (optional)
     * @param string $ordering  (optional)
     * @param string $search  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productsListWithHttpInfo($authorization, $limit = null, $gtin = null, $name__icontains = null, $name = null, $offset = null, $ordering = null, $search = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling productsList');
        }
        // parse inputs
        $resourcePath = "/template/products";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($gtin !== null) {
            $queryParams['gtin'] = $this->apiClient->getSerializer()->toQueryValue($gtin);
        }
        // query params
        if ($name__icontains !== null) {
            $queryParams['name__icontains'] = $this->apiClient->getSerializer()->toQueryValue($name__icontains);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = $this->apiClient->getSerializer()->toQueryValue($ordering);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/template/products'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation productsPartialUpdate
     *
     * 
     *
     * @param string $gtin  (required)
     * @param string $authorization  (required)
     * @param \Swagger\Client\Model\MODELfa9d13 $mode_lfa9d13  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function productsPartialUpdate($gtin, $authorization, $mode_lfa9d13)
    {
        list($response) = $this->productsPartialUpdateWithHttpInfo($gtin, $authorization, $mode_lfa9d13);
        return $response;
    }

    /**
     * Operation productsPartialUpdateWithHttpInfo
     *
     * 
     *
     * @param string $gtin  (required)
     * @param string $authorization  (required)
     * @param \Swagger\Client\Model\MODELfa9d13 $mode_lfa9d13  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productsPartialUpdateWithHttpInfo($gtin, $authorization, $mode_lfa9d13)
    {
        // verify the required parameter 'gtin' is set
        if ($gtin === null) {
            throw new \InvalidArgumentException('Missing the required parameter $gtin when calling productsPartialUpdate');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling productsPartialUpdate');
        }
        // verify the required parameter 'mode_lfa9d13' is set
        if ($mode_lfa9d13 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mode_lfa9d13 when calling productsPartialUpdate');
        }
        // parse inputs
        $resourcePath = "/template/products/{gtin}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($gtin !== null) {
            $resourcePath = str_replace(
                "{" . "gtin" . "}",
                $this->apiClient->getSerializer()->toPathValue($gtin),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($mode_lfa9d13)) {
            $_tempBody = $mode_lfa9d13;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/template/products/{gtin}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation productsRead
     *
     * 
     *
     * @param string $gtin  (required)
     * @param string $authorization  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function productsRead($gtin, $authorization)
    {
        list($response) = $this->productsReadWithHttpInfo($gtin, $authorization);
        return $response;
    }

    /**
     * Operation productsReadWithHttpInfo
     *
     * 
     *
     * @param string $gtin  (required)
     * @param string $authorization  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productsReadWithHttpInfo($gtin, $authorization)
    {
        // verify the required parameter 'gtin' is set
        if ($gtin === null) {
            throw new \InvalidArgumentException('Missing the required parameter $gtin when calling productsRead');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling productsRead');
        }
        // parse inputs
        $resourcePath = "/template/products/{gtin}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($gtin !== null) {
            $resourcePath = str_replace(
                "{" . "gtin" . "}",
                $this->apiClient->getSerializer()->toPathValue($gtin),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/template/products/{gtin}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation productsUpdate
     *
     * 
     *
     * @param string $gtin  (required)
     * @param string $authorization  (required)
     * @param \Swagger\Client\Model\MODELbc7b75 $mode_lbc7b75  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function productsUpdate($gtin, $authorization, $mode_lbc7b75)
    {
        list($response) = $this->productsUpdateWithHttpInfo($gtin, $authorization, $mode_lbc7b75);
        return $response;
    }

    /**
     * Operation productsUpdateWithHttpInfo
     *
     * 
     *
     * @param string $gtin  (required)
     * @param string $authorization  (required)
     * @param \Swagger\Client\Model\MODELbc7b75 $mode_lbc7b75  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productsUpdateWithHttpInfo($gtin, $authorization, $mode_lbc7b75)
    {
        // verify the required parameter 'gtin' is set
        if ($gtin === null) {
            throw new \InvalidArgumentException('Missing the required parameter $gtin when calling productsUpdate');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling productsUpdate');
        }
        // verify the required parameter 'mode_lbc7b75' is set
        if ($mode_lbc7b75 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mode_lbc7b75 when calling productsUpdate');
        }
        // parse inputs
        $resourcePath = "/template/products/{gtin}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($gtin !== null) {
            $resourcePath = str_replace(
                "{" . "gtin" . "}",
                $this->apiClient->getSerializer()->toPathValue($gtin),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($mode_lbc7b75)) {
            $_tempBody = $mode_lbc7b75;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/template/products/{gtin}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation sellerOrdersCreate
     *
     * 
     *
     * @param string $authorization  (required)
     * @param \Swagger\Client\Model\MODELd4278c $mode_ld4278c  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function sellerOrdersCreate($authorization, $mode_ld4278c)
    {
        list($response) = $this->sellerOrdersCreateWithHttpInfo($authorization, $mode_ld4278c);
        return $response;
    }

    /**
     * Operation sellerOrdersCreateWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param \Swagger\Client\Model\MODELd4278c $mode_ld4278c  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellerOrdersCreateWithHttpInfo($authorization, $mode_ld4278c)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling sellerOrdersCreate');
        }
        // verify the required parameter 'mode_ld4278c' is set
        if ($mode_ld4278c === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mode_ld4278c when calling sellerOrdersCreate');
        }
        // parse inputs
        $resourcePath = "/seller-orders";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($mode_ld4278c)) {
            $_tempBody = $mode_ld4278c;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/seller-orders'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation sellerOrdersDelete
     *
     * 
     *
     * @param string $code  (required)
     * @param string $authorization  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function sellerOrdersDelete($code, $authorization)
    {
        list($response) = $this->sellerOrdersDeleteWithHttpInfo($code, $authorization);
        return $response;
    }

    /**
     * Operation sellerOrdersDeleteWithHttpInfo
     *
     * 
     *
     * @param string $code  (required)
     * @param string $authorization  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellerOrdersDeleteWithHttpInfo($code, $authorization)
    {
        // verify the required parameter 'code' is set
        if ($code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $code when calling sellerOrdersDelete');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling sellerOrdersDelete');
        }
        // parse inputs
        $resourcePath = "/seller-orders/{code}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                "{" . "code" . "}",
                $this->apiClient->getSerializer()->toPathValue($code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/seller-orders/{code}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation sellerOrdersItemsList
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $seller_order  (optional)
     * @param string $limit  (optional)
     * @param string $ordering  (optional)
     * @param string $search  (optional)
     * @param string $offset  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function sellerOrdersItemsList($authorization, $seller_order = null, $limit = null, $ordering = null, $search = null, $offset = null)
    {
        list($response) = $this->sellerOrdersItemsListWithHttpInfo($authorization, $seller_order, $limit, $ordering, $search, $offset);
        return $response;
    }

    /**
     * Operation sellerOrdersItemsListWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $seller_order  (optional)
     * @param string $limit  (optional)
     * @param string $ordering  (optional)
     * @param string $search  (optional)
     * @param string $offset  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellerOrdersItemsListWithHttpInfo($authorization, $seller_order = null, $limit = null, $ordering = null, $search = null, $offset = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling sellerOrdersItemsList');
        }
        // parse inputs
        $resourcePath = "/seller-orders-items";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($seller_order !== null) {
            $queryParams['seller_order'] = $this->apiClient->getSerializer()->toQueryValue($seller_order);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = $this->apiClient->getSerializer()->toQueryValue($ordering);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/seller-orders-items'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation sellerOrdersItemsRead
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function sellerOrdersItemsRead($authorization, $id)
    {
        list($response) = $this->sellerOrdersItemsReadWithHttpInfo($authorization, $id);
        return $response;
    }

    /**
     * Operation sellerOrdersItemsReadWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellerOrdersItemsReadWithHttpInfo($authorization, $id)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling sellerOrdersItemsRead');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling sellerOrdersItemsRead');
        }
        // parse inputs
        $resourcePath = "/seller-orders-items/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/seller-orders-items/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation sellerOrdersList
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $seller_id  (optional)
     * @param string $start_date  (optional)
     * @param string $overdue  (optional)
     * @param string $status  (optional)
     * @param string $code  (optional)
     * @param string $ordering  (optional)
     * @param string $search  (optional)
     * @param string $canceled  (optional)
     * @param string $limit  (optional)
     * @param string $order_id  (optional)
     * @param string $offset  (optional)
     * @param string $cancelation_status  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function sellerOrdersList($authorization, $seller_id = null, $start_date = null, $overdue = null, $status = null, $code = null, $ordering = null, $search = null, $canceled = null, $limit = null, $order_id = null, $offset = null, $cancelation_status = null)
    {
        list($response) = $this->sellerOrdersListWithHttpInfo($authorization, $seller_id, $start_date, $overdue, $status, $code, $ordering, $search, $canceled, $limit, $order_id, $offset, $cancelation_status);
        return $response;
    }

    /**
     * Operation sellerOrdersListWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $seller_id  (optional)
     * @param string $start_date  (optional)
     * @param string $overdue  (optional)
     * @param string $status  (optional)
     * @param string $code  (optional)
     * @param string $ordering  (optional)
     * @param string $search  (optional)
     * @param string $canceled  (optional)
     * @param string $limit  (optional)
     * @param string $order_id  (optional)
     * @param string $offset  (optional)
     * @param string $cancelation_status  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellerOrdersListWithHttpInfo($authorization, $seller_id = null, $start_date = null, $overdue = null, $status = null, $code = null, $ordering = null, $search = null, $canceled = null, $limit = null, $order_id = null, $offset = null, $cancelation_status = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling sellerOrdersList');
        }
        // parse inputs
        $resourcePath = "/seller-orders";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($seller_id !== null) {
            $queryParams['seller_id'] = $this->apiClient->getSerializer()->toQueryValue($seller_id);
        }
        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = $this->apiClient->getSerializer()->toQueryValue($start_date);
        }
        // query params
        if ($overdue !== null) {
            $queryParams['overdue'] = $this->apiClient->getSerializer()->toQueryValue($overdue);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($code !== null) {
            $queryParams['code'] = $this->apiClient->getSerializer()->toQueryValue($code);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = $this->apiClient->getSerializer()->toQueryValue($ordering);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // query params
        if ($canceled !== null) {
            $queryParams['canceled'] = $this->apiClient->getSerializer()->toQueryValue($canceled);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($order_id !== null) {
            $queryParams['order_id'] = $this->apiClient->getSerializer()->toQueryValue($order_id);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($cancelation_status !== null) {
            $queryParams['cancelation_status'] = $this->apiClient->getSerializer()->toQueryValue($cancelation_status);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/seller-orders'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation sellerOrdersPartialUpdate
     *
     * 
     *
     * @param string $code  (required)
     * @param string $authorization  (required)
     * @param \Swagger\Client\Model\MODELf3a1b6 $mode_lf3a1b6  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function sellerOrdersPartialUpdate($code, $authorization, $mode_lf3a1b6)
    {
        list($response) = $this->sellerOrdersPartialUpdateWithHttpInfo($code, $authorization, $mode_lf3a1b6);
        return $response;
    }

    /**
     * Operation sellerOrdersPartialUpdateWithHttpInfo
     *
     * 
     *
     * @param string $code  (required)
     * @param string $authorization  (required)
     * @param \Swagger\Client\Model\MODELf3a1b6 $mode_lf3a1b6  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellerOrdersPartialUpdateWithHttpInfo($code, $authorization, $mode_lf3a1b6)
    {
        // verify the required parameter 'code' is set
        if ($code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $code when calling sellerOrdersPartialUpdate');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling sellerOrdersPartialUpdate');
        }
        // verify the required parameter 'mode_lf3a1b6' is set
        if ($mode_lf3a1b6 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mode_lf3a1b6 when calling sellerOrdersPartialUpdate');
        }
        // parse inputs
        $resourcePath = "/seller-orders/{code}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                "{" . "code" . "}",
                $this->apiClient->getSerializer()->toPathValue($code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($mode_lf3a1b6)) {
            $_tempBody = $mode_lf3a1b6;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/seller-orders/{code}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation sellerOrdersRead
     *
     * 
     *
     * @param string $code  (required)
     * @param string $authorization  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function sellerOrdersRead($code, $authorization)
    {
        list($response) = $this->sellerOrdersReadWithHttpInfo($code, $authorization);
        return $response;
    }

    /**
     * Operation sellerOrdersReadWithHttpInfo
     *
     * 
     *
     * @param string $code  (required)
     * @param string $authorization  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellerOrdersReadWithHttpInfo($code, $authorization)
    {
        // verify the required parameter 'code' is set
        if ($code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $code when calling sellerOrdersRead');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling sellerOrdersRead');
        }
        // parse inputs
        $resourcePath = "/seller-orders/{code}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                "{" . "code" . "}",
                $this->apiClient->getSerializer()->toPathValue($code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/seller-orders/{code}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation sellerOrdersShipment
     *
     * 
     *
     * @param string $code  (required)
     * @param string $authorization  (required)
     * @param \Swagger\Client\Model\MODEL6c172d $model6c172d  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function sellerOrdersShipment($code, $authorization, $model6c172d)
    {
        list($response) = $this->sellerOrdersShipmentWithHttpInfo($code, $authorization, $model6c172d);
        return $response;
    }

    /**
     * Operation sellerOrdersShipmentWithHttpInfo
     *
     * 
     *
     * @param string $code  (required)
     * @param string $authorization  (required)
     * @param \Swagger\Client\Model\MODEL6c172d $model6c172d  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellerOrdersShipmentWithHttpInfo($code, $authorization, $model6c172d)
    {
        // verify the required parameter 'code' is set
        if ($code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $code when calling sellerOrdersShipment');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling sellerOrdersShipment');
        }
        // verify the required parameter 'model6c172d' is set
        if ($model6c172d === null) {
            throw new \InvalidArgumentException('Missing the required parameter $model6c172d when calling sellerOrdersShipment');
        }
        // parse inputs
        $resourcePath = "/seller-orders/{code}/shipment";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                "{" . "code" . "}",
                $this->apiClient->getSerializer()->toPathValue($code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($model6c172d)) {
            $_tempBody = $model6c172d;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/seller-orders/{code}/shipment'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation sellerOrdersUpdate
     *
     * 
     *
     * @param string $code  (required)
     * @param string $authorization  (required)
     * @param \Swagger\Client\Model\MODEL8779bd $model8779bd  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function sellerOrdersUpdate($code, $authorization, $model8779bd)
    {
        list($response) = $this->sellerOrdersUpdateWithHttpInfo($code, $authorization, $model8779bd);
        return $response;
    }

    /**
     * Operation sellerOrdersUpdateWithHttpInfo
     *
     * 
     *
     * @param string $code  (required)
     * @param string $authorization  (required)
     * @param \Swagger\Client\Model\MODEL8779bd $model8779bd  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellerOrdersUpdateWithHttpInfo($code, $authorization, $model8779bd)
    {
        // verify the required parameter 'code' is set
        if ($code === null) {
            throw new \InvalidArgumentException('Missing the required parameter $code when calling sellerOrdersUpdate');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling sellerOrdersUpdate');
        }
        // verify the required parameter 'model8779bd' is set
        if ($model8779bd === null) {
            throw new \InvalidArgumentException('Missing the required parameter $model8779bd when calling sellerOrdersUpdate');
        }
        // parse inputs
        $resourcePath = "/seller-orders/{code}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($code !== null) {
            $resourcePath = str_replace(
                "{" . "code" . "}",
                $this->apiClient->getSerializer()->toPathValue($code),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($model8779bd)) {
            $_tempBody = $model8779bd;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/seller-orders/{code}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation sellerProductsCreate
     *
     * 
     *
     * @param string $authorization  (required)
     * @param \Swagger\Client\Model\MODEL2eaa59 $model2eaa59  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function sellerProductsCreate($authorization, $model2eaa59)
    {
        list($response) = $this->sellerProductsCreateWithHttpInfo($authorization, $model2eaa59);
        return $response;
    }

    /**
     * Operation sellerProductsCreateWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param \Swagger\Client\Model\MODEL2eaa59 $model2eaa59  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellerProductsCreateWithHttpInfo($authorization, $model2eaa59)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling sellerProductsCreate');
        }
        // verify the required parameter 'model2eaa59' is set
        if ($model2eaa59 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $model2eaa59 when calling sellerProductsCreate');
        }
        // parse inputs
        $resourcePath = "/seller-products";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($model2eaa59)) {
            $_tempBody = $model2eaa59;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/seller-products'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation sellerProductsDelete
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $sku  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function sellerProductsDelete($authorization, $sku)
    {
        list($response) = $this->sellerProductsDeleteWithHttpInfo($authorization, $sku);
        return $response;
    }

    /**
     * Operation sellerProductsDeleteWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $sku  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellerProductsDeleteWithHttpInfo($authorization, $sku)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling sellerProductsDelete');
        }
        // verify the required parameter 'sku' is set
        if ($sku === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sku when calling sellerProductsDelete');
        }
        // parse inputs
        $resourcePath = "/seller-products/{sku}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($sku !== null) {
            $resourcePath = str_replace(
                "{" . "sku" . "}",
                $this->apiClient->getSerializer()->toPathValue($sku),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/seller-products/{sku}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation sellerProductsHistoryList
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $limit  (optional)
     * @param string $offset  (optional)
     * @param string $status  (optional)
     * @param string $ordering  (optional)
     * @param string $search  (optional)
     * @param string $seller_product__group  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function sellerProductsHistoryList($authorization, $limit = null, $offset = null, $status = null, $ordering = null, $search = null, $seller_product__group = null)
    {
        list($response) = $this->sellerProductsHistoryListWithHttpInfo($authorization, $limit, $offset, $status, $ordering, $search, $seller_product__group);
        return $response;
    }

    /**
     * Operation sellerProductsHistoryListWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $limit  (optional)
     * @param string $offset  (optional)
     * @param string $status  (optional)
     * @param string $ordering  (optional)
     * @param string $search  (optional)
     * @param string $seller_product__group  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellerProductsHistoryListWithHttpInfo($authorization, $limit = null, $offset = null, $status = null, $ordering = null, $search = null, $seller_product__group = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling sellerProductsHistoryList');
        }
        // parse inputs
        $resourcePath = "/seller-products-history";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = $this->apiClient->getSerializer()->toQueryValue($ordering);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // query params
        if ($seller_product__group !== null) {
            $queryParams['seller_product__group'] = $this->apiClient->getSerializer()->toQueryValue($seller_product__group);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/seller-products-history'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation sellerProductsHistoryRead
     *
     * 
     *
     * @param string $seller_product__sku  (required)
     * @param string $authorization  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function sellerProductsHistoryRead($seller_product__sku, $authorization)
    {
        list($response) = $this->sellerProductsHistoryReadWithHttpInfo($seller_product__sku, $authorization);
        return $response;
    }

    /**
     * Operation sellerProductsHistoryReadWithHttpInfo
     *
     * 
     *
     * @param string $seller_product__sku  (required)
     * @param string $authorization  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellerProductsHistoryReadWithHttpInfo($seller_product__sku, $authorization)
    {
        // verify the required parameter 'seller_product__sku' is set
        if ($seller_product__sku === null) {
            throw new \InvalidArgumentException('Missing the required parameter $seller_product__sku when calling sellerProductsHistoryRead');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling sellerProductsHistoryRead');
        }
        // parse inputs
        $resourcePath = "/seller-products-history/{seller_product__sku}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($seller_product__sku !== null) {
            $resourcePath = str_replace(
                "{" . "seller_product__sku" . "}",
                $this->apiClient->getSerializer()->toPathValue($seller_product__sku),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/seller-products-history/{seller_product__sku}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation sellerProductsList
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $seller_id  (optional)
     * @param string $name  (optional)
     * @param string $canonical_sku  (optional)
     * @param string $status  (optional)
     * @param string $ordering  (optional)
     * @param string $search  (optional)
     * @param string $stock__quantity  (optional)
     * @param string $limit  (optional)
     * @param string $gtin  (optional)
     * @param string $name__icontains  (optional)
     * @param string $offset  (optional)
     * @param string $group  (optional)
     * @param string $has_canonical  (optional)
     * @param string $canonicals_by_name  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function sellerProductsList($authorization, $seller_id = null, $name = null, $canonical_sku = null, $status = null, $ordering = null, $search = null, $stock__quantity = null, $limit = null, $gtin = null, $name__icontains = null, $offset = null, $group = null, $has_canonical = null, $canonicals_by_name = null)
    {
        list($response) = $this->sellerProductsListWithHttpInfo($authorization, $seller_id, $name, $canonical_sku, $status, $ordering, $search, $stock__quantity, $limit, $gtin, $name__icontains, $offset, $group, $has_canonical, $canonicals_by_name);
        return $response;
    }

    /**
     * Operation sellerProductsListWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $seller_id  (optional)
     * @param string $name  (optional)
     * @param string $canonical_sku  (optional)
     * @param string $status  (optional)
     * @param string $ordering  (optional)
     * @param string $search  (optional)
     * @param string $stock__quantity  (optional)
     * @param string $limit  (optional)
     * @param string $gtin  (optional)
     * @param string $name__icontains  (optional)
     * @param string $offset  (optional)
     * @param string $group  (optional)
     * @param string $has_canonical  (optional)
     * @param string $canonicals_by_name  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellerProductsListWithHttpInfo($authorization, $seller_id = null, $name = null, $canonical_sku = null, $status = null, $ordering = null, $search = null, $stock__quantity = null, $limit = null, $gtin = null, $name__icontains = null, $offset = null, $group = null, $has_canonical = null, $canonicals_by_name = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling sellerProductsList');
        }
        // parse inputs
        $resourcePath = "/seller-products";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($seller_id !== null) {
            $queryParams['seller_id'] = $this->apiClient->getSerializer()->toQueryValue($seller_id);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($canonical_sku !== null) {
            $queryParams['canonical_sku'] = $this->apiClient->getSerializer()->toQueryValue($canonical_sku);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($status);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = $this->apiClient->getSerializer()->toQueryValue($ordering);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // query params
        if ($stock__quantity !== null) {
            $queryParams['stock__quantity'] = $this->apiClient->getSerializer()->toQueryValue($stock__quantity);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($gtin !== null) {
            $queryParams['gtin'] = $this->apiClient->getSerializer()->toQueryValue($gtin);
        }
        // query params
        if ($name__icontains !== null) {
            $queryParams['name__icontains'] = $this->apiClient->getSerializer()->toQueryValue($name__icontains);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($group !== null) {
            $queryParams['group'] = $this->apiClient->getSerializer()->toQueryValue($group);
        }
        // query params
        if ($has_canonical !== null) {
            $queryParams['has_canonical'] = $this->apiClient->getSerializer()->toQueryValue($has_canonical);
        }
        // query params
        if ($canonicals_by_name !== null) {
            $queryParams['canonicals_by_name'] = $this->apiClient->getSerializer()->toQueryValue($canonicals_by_name);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/seller-products'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation sellerProductsPartialUpdate
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $sku  (required)
     * @param \Swagger\Client\Model\MODEL4339e0 $model4339e0  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function sellerProductsPartialUpdate($authorization, $sku, $model4339e0)
    {
        list($response) = $this->sellerProductsPartialUpdateWithHttpInfo($authorization, $sku, $model4339e0);
        return $response;
    }

    /**
     * Operation sellerProductsPartialUpdateWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $sku  (required)
     * @param \Swagger\Client\Model\MODEL4339e0 $model4339e0  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellerProductsPartialUpdateWithHttpInfo($authorization, $sku, $model4339e0)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling sellerProductsPartialUpdate');
        }
        // verify the required parameter 'sku' is set
        if ($sku === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sku when calling sellerProductsPartialUpdate');
        }
        // verify the required parameter 'model4339e0' is set
        if ($model4339e0 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $model4339e0 when calling sellerProductsPartialUpdate');
        }
        // parse inputs
        $resourcePath = "/seller-products/{sku}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($sku !== null) {
            $resourcePath = str_replace(
                "{" . "sku" . "}",
                $this->apiClient->getSerializer()->toPathValue($sku),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($model4339e0)) {
            $_tempBody = $model4339e0;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/seller-products/{sku}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation sellerProductsRead
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $sku  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function sellerProductsRead($authorization, $sku)
    {
        list($response) = $this->sellerProductsReadWithHttpInfo($authorization, $sku);
        return $response;
    }

    /**
     * Operation sellerProductsReadWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $sku  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellerProductsReadWithHttpInfo($authorization, $sku)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling sellerProductsRead');
        }
        // verify the required parameter 'sku' is set
        if ($sku === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sku when calling sellerProductsRead');
        }
        // parse inputs
        $resourcePath = "/seller-products/{sku}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($sku !== null) {
            $resourcePath = str_replace(
                "{" . "sku" . "}",
                $this->apiClient->getSerializer()->toPathValue($sku),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/seller-products/{sku}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation sellerProductsUpdate
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $sku  (required)
     * @param \Swagger\Client\Model\MODEL871628 $model871628  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function sellerProductsUpdate($authorization, $sku, $model871628)
    {
        list($response) = $this->sellerProductsUpdateWithHttpInfo($authorization, $sku, $model871628);
        return $response;
    }

    /**
     * Operation sellerProductsUpdateWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $sku  (required)
     * @param \Swagger\Client\Model\MODEL871628 $model871628  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellerProductsUpdateWithHttpInfo($authorization, $sku, $model871628)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling sellerProductsUpdate');
        }
        // verify the required parameter 'sku' is set
        if ($sku === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sku when calling sellerProductsUpdate');
        }
        // verify the required parameter 'model871628' is set
        if ($model871628 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $model871628 when calling sellerProductsUpdate');
        }
        // parse inputs
        $resourcePath = "/seller-products/{sku}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($sku !== null) {
            $resourcePath = str_replace(
                "{" . "sku" . "}",
                $this->apiClient->getSerializer()->toPathValue($sku),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($model871628)) {
            $_tempBody = $model871628;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/seller-products/{sku}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation sellersCreate
     *
     * 
     *
     * @param string $authorization  (required)
     * @param \Swagger\Client\Model\MODEL3efebe $model3efebe  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function sellersCreate($authorization, $model3efebe)
    {
        list($response) = $this->sellersCreateWithHttpInfo($authorization, $model3efebe);
        return $response;
    }

    /**
     * Operation sellersCreateWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param \Swagger\Client\Model\MODEL3efebe $model3efebe  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellersCreateWithHttpInfo($authorization, $model3efebe)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling sellersCreate');
        }
        // verify the required parameter 'model3efebe' is set
        if ($model3efebe === null) {
            throw new \InvalidArgumentException('Missing the required parameter $model3efebe when calling sellersCreate');
        }
        // parse inputs
        $resourcePath = "/sellers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($model3efebe)) {
            $_tempBody = $model3efebe;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/sellers'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation sellersDelete
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function sellersDelete($authorization, $id)
    {
        list($response) = $this->sellersDeleteWithHttpInfo($authorization, $id);
        return $response;
    }

    /**
     * Operation sellersDeleteWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellersDeleteWithHttpInfo($authorization, $id)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling sellersDelete');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling sellersDelete');
        }
        // parse inputs
        $resourcePath = "/sellers/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/sellers/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation sellersList
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $owner__email  (optional)
     * @param string $limit  (optional)
     * @param string $offset  (optional)
     * @param string $blocked  (optional)
     * @param string $paused  (optional)
     * @param string $ordering  (optional)
     * @param string $search  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function sellersList($authorization, $owner__email = null, $limit = null, $offset = null, $blocked = null, $paused = null, $ordering = null, $search = null)
    {
        list($response) = $this->sellersListWithHttpInfo($authorization, $owner__email, $limit, $offset, $blocked, $paused, $ordering, $search);
        return $response;
    }

    /**
     * Operation sellersListWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $owner__email  (optional)
     * @param string $limit  (optional)
     * @param string $offset  (optional)
     * @param string $blocked  (optional)
     * @param string $paused  (optional)
     * @param string $ordering  (optional)
     * @param string $search  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellersListWithHttpInfo($authorization, $owner__email = null, $limit = null, $offset = null, $blocked = null, $paused = null, $ordering = null, $search = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling sellersList');
        }
        // parse inputs
        $resourcePath = "/sellers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($owner__email !== null) {
            $queryParams['owner__email'] = $this->apiClient->getSerializer()->toQueryValue($owner__email);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($blocked !== null) {
            $queryParams['blocked'] = $this->apiClient->getSerializer()->toQueryValue($blocked);
        }
        // query params
        if ($paused !== null) {
            $queryParams['paused'] = $this->apiClient->getSerializer()->toQueryValue($paused);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = $this->apiClient->getSerializer()->toQueryValue($ordering);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/sellers'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation sellersPartialUpdate
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $id  (required)
     * @param \Swagger\Client\Model\MODEL053815 $model053815  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function sellersPartialUpdate($authorization, $id, $model053815)
    {
        list($response) = $this->sellersPartialUpdateWithHttpInfo($authorization, $id, $model053815);
        return $response;
    }

    /**
     * Operation sellersPartialUpdateWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $id  (required)
     * @param \Swagger\Client\Model\MODEL053815 $model053815  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellersPartialUpdateWithHttpInfo($authorization, $id, $model053815)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling sellersPartialUpdate');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling sellersPartialUpdate');
        }
        // verify the required parameter 'model053815' is set
        if ($model053815 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $model053815 when calling sellersPartialUpdate');
        }
        // parse inputs
        $resourcePath = "/sellers/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($model053815)) {
            $_tempBody = $model053815;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/sellers/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation sellersRead
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function sellersRead($authorization, $id)
    {
        list($response) = $this->sellersReadWithHttpInfo($authorization, $id);
        return $response;
    }

    /**
     * Operation sellersReadWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellersReadWithHttpInfo($authorization, $id)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling sellersRead');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling sellersRead');
        }
        // parse inputs
        $resourcePath = "/sellers/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/sellers/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation sellersUpdate
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $id  (required)
     * @param \Swagger\Client\Model\MODEL686451 $model686451  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function sellersUpdate($authorization, $id, $model686451)
    {
        list($response) = $this->sellersUpdateWithHttpInfo($authorization, $id, $model686451);
        return $response;
    }

    /**
     * Operation sellersUpdateWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $id  (required)
     * @param \Swagger\Client\Model\MODEL686451 $model686451  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sellersUpdateWithHttpInfo($authorization, $id, $model686451)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling sellersUpdate');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling sellersUpdate');
        }
        // verify the required parameter 'model686451' is set
        if ($model686451 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $model686451 when calling sellersUpdate');
        }
        // parse inputs
        $resourcePath = "/sellers/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($model686451)) {
            $_tempBody = $model686451;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/sellers/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation statsRead
     *
     * 
     *
     * @param string $seller_id  (required)
     * @param string $authorization  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function statsRead($seller_id, $authorization)
    {
        list($response) = $this->statsReadWithHttpInfo($seller_id, $authorization);
        return $response;
    }

    /**
     * Operation statsReadWithHttpInfo
     *
     * 
     *
     * @param string $seller_id  (required)
     * @param string $authorization  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function statsReadWithHttpInfo($seller_id, $authorization)
    {
        // verify the required parameter 'seller_id' is set
        if ($seller_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $seller_id when calling statsRead');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling statsRead');
        }
        // parse inputs
        $resourcePath = "/_stats/orders/{seller_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($seller_id !== null) {
            $resourcePath = str_replace(
                "{" . "seller_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($seller_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/_stats/orders/{seller_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation statsRead_0
     *
     * 
     *
     * @param string $seller_id  (required)
     * @param string $authorization  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function statsRead_0($seller_id, $authorization)
    {
        list($response) = $this->statsRead_0WithHttpInfo($seller_id, $authorization);
        return $response;
    }

    /**
     * Operation statsRead_0WithHttpInfo
     *
     * 
     *
     * @param string $seller_id  (required)
     * @param string $authorization  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function statsRead_0WithHttpInfo($seller_id, $authorization)
    {
        // verify the required parameter 'seller_id' is set
        if ($seller_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $seller_id when calling statsRead_0');
        }
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling statsRead_0');
        }
        // parse inputs
        $resourcePath = "/_stats/products/{seller_id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($seller_id !== null) {
            $resourcePath = str_replace(
                "{" . "seller_id" . "}",
                $this->apiClient->getSerializer()->toPathValue($seller_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/_stats/products/{seller_id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation usersCreate
     *
     * 
     *
     * @param string $authorization  (required)
     * @param \Swagger\Client\Model\MODEL40d2ff $model40d2ff  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function usersCreate($authorization, $model40d2ff)
    {
        list($response) = $this->usersCreateWithHttpInfo($authorization, $model40d2ff);
        return $response;
    }

    /**
     * Operation usersCreateWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param \Swagger\Client\Model\MODEL40d2ff $model40d2ff  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersCreateWithHttpInfo($authorization, $model40d2ff)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling usersCreate');
        }
        // verify the required parameter 'model40d2ff' is set
        if ($model40d2ff === null) {
            throw new \InvalidArgumentException('Missing the required parameter $model40d2ff when calling usersCreate');
        }
        // parse inputs
        $resourcePath = "/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($model40d2ff)) {
            $_tempBody = $model40d2ff;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/users'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation usersDelete
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function usersDelete($authorization, $id)
    {
        list($response) = $this->usersDeleteWithHttpInfo($authorization, $id);
        return $response;
    }

    /**
     * Operation usersDeleteWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersDeleteWithHttpInfo($authorization, $id)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling usersDelete');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling usersDelete');
        }
        // parse inputs
        $resourcePath = "/users/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/users/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation usersList
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $email  (optional)
     * @param string $limit  (optional)
     * @param string $name  (optional)
     * @param string $offset  (optional)
     * @param string $ordering  (optional)
     * @param string $search  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function usersList($authorization, $email = null, $limit = null, $name = null, $offset = null, $ordering = null, $search = null)
    {
        list($response) = $this->usersListWithHttpInfo($authorization, $email, $limit, $name, $offset, $ordering, $search);
        return $response;
    }

    /**
     * Operation usersListWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $email  (optional)
     * @param string $limit  (optional)
     * @param string $name  (optional)
     * @param string $offset  (optional)
     * @param string $ordering  (optional)
     * @param string $search  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersListWithHttpInfo($authorization, $email = null, $limit = null, $name = null, $offset = null, $ordering = null, $search = null)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling usersList');
        }
        // parse inputs
        $resourcePath = "/users";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($email !== null) {
            $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($email);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = $this->apiClient->getSerializer()->toQueryValue($limit);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = $this->apiClient->getSerializer()->toQueryValue($offset);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = $this->apiClient->getSerializer()->toQueryValue($ordering);
        }
        // query params
        if ($search !== null) {
            $queryParams['search'] = $this->apiClient->getSerializer()->toQueryValue($search);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/users'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation usersPartialUpdate
     *
     * 
     *
     * @param string $id  (required)
     * @param \Swagger\Client\Model\MODELae14ae $mode_lae14ae  (required)
     * @param string $authorization  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function usersPartialUpdate($id, $mode_lae14ae, $authorization = null)
    {
        list($response) = $this->usersPartialUpdateWithHttpInfo($id, $mode_lae14ae, $authorization);
        return $response;
    }

    /**
     * Operation usersPartialUpdateWithHttpInfo
     *
     * 
     *
     * @param string $id  (required)
     * @param \Swagger\Client\Model\MODELae14ae $mode_lae14ae  (required)
     * @param string $authorization  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersPartialUpdateWithHttpInfo($id, $mode_lae14ae, $authorization = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling usersPartialUpdate');
        }
        // verify the required parameter 'mode_lae14ae' is set
        if ($mode_lae14ae === null) {
            throw new \InvalidArgumentException('Missing the required parameter $mode_lae14ae when calling usersPartialUpdate');
        }
        // parse inputs
        $resourcePath = "/users/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($mode_lae14ae)) {
            $_tempBody = $mode_lae14ae;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/users/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation usersRead
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function usersRead($authorization, $id)
    {
        list($response) = $this->usersReadWithHttpInfo($authorization, $id);
        return $response;
    }

    /**
     * Operation usersReadWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersReadWithHttpInfo($authorization, $id)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling usersRead');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling usersRead');
        }
        // parse inputs
        $resourcePath = "/users/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/users/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation usersUpdate
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $id  (required)
     * @param \Swagger\Client\Model\MODEL70b893 $model70b893  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function usersUpdate($authorization, $id, $model70b893)
    {
        list($response) = $this->usersUpdateWithHttpInfo($authorization, $id, $model70b893);
        return $response;
    }

    /**
     * Operation usersUpdateWithHttpInfo
     *
     * 
     *
     * @param string $authorization  (required)
     * @param string $id  (required)
     * @param \Swagger\Client\Model\MODEL70b893 $model70b893  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersUpdateWithHttpInfo($authorization, $id, $model70b893)
    {
        // verify the required parameter 'authorization' is set
        if ($authorization === null) {
            throw new \InvalidArgumentException('Missing the required parameter $authorization when calling usersUpdate');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling usersUpdate');
        }
        // verify the required parameter 'model70b893' is set
        if ($model70b893 === null) {
            throw new \InvalidArgumentException('Missing the required parameter $model70b893 when calling usersUpdate');
        }
        // parse inputs
        $resourcePath = "/users/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = $this->apiClient->getSerializer()->toHeaderValue($authorization);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($model70b893)) {
            $_tempBody = $model70b893;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/users/{id}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
