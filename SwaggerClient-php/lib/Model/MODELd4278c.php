<?php
/**
 * MODELd4278c
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * olist-api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * MODELd4278c Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MODELd4278c implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'MODELd4278c';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'approved_at' => 'string',
        'availability_days' => 'int',
        'channel_slug' => 'string',
        'channel_store' => 'string',
        'customer' => 'object',
        'estimated_delivery_date' => 'string',
        'order_id' => 'string',
        'payment_methods' => 'string[]',
        'purchase_timestamp' => 'string',
        'seller_brand' => 'string',
        'seller_email' => 'string',
        'seller_id' => 'string',
        'seller_name' => 'string',
        'seller_order_items' => 'string[]',
        'shipment' => 'object',
        'shipping_limit_date' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'approved_at' => 'approved_at',
        'availability_days' => 'availability_days',
        'channel_slug' => 'channel_slug',
        'channel_store' => 'channel_store',
        'customer' => 'customer',
        'estimated_delivery_date' => 'estimated_delivery_date',
        'order_id' => 'order_id',
        'payment_methods' => 'payment_methods',
        'purchase_timestamp' => 'purchase_timestamp',
        'seller_brand' => 'seller_brand',
        'seller_email' => 'seller_email',
        'seller_id' => 'seller_id',
        'seller_name' => 'seller_name',
        'seller_order_items' => 'seller_order_items',
        'shipment' => 'shipment',
        'shipping_limit_date' => 'shipping_limit_date'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'approved_at' => 'setApprovedAt',
        'availability_days' => 'setAvailabilityDays',
        'channel_slug' => 'setChannelSlug',
        'channel_store' => 'setChannelStore',
        'customer' => 'setCustomer',
        'estimated_delivery_date' => 'setEstimatedDeliveryDate',
        'order_id' => 'setOrderId',
        'payment_methods' => 'setPaymentMethods',
        'purchase_timestamp' => 'setPurchaseTimestamp',
        'seller_brand' => 'setSellerBrand',
        'seller_email' => 'setSellerEmail',
        'seller_id' => 'setSellerId',
        'seller_name' => 'setSellerName',
        'seller_order_items' => 'setSellerOrderItems',
        'shipment' => 'setShipment',
        'shipping_limit_date' => 'setShippingLimitDate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'approved_at' => 'getApprovedAt',
        'availability_days' => 'getAvailabilityDays',
        'channel_slug' => 'getChannelSlug',
        'channel_store' => 'getChannelStore',
        'customer' => 'getCustomer',
        'estimated_delivery_date' => 'getEstimatedDeliveryDate',
        'order_id' => 'getOrderId',
        'payment_methods' => 'getPaymentMethods',
        'purchase_timestamp' => 'getPurchaseTimestamp',
        'seller_brand' => 'getSellerBrand',
        'seller_email' => 'getSellerEmail',
        'seller_id' => 'getSellerId',
        'seller_name' => 'getSellerName',
        'seller_order_items' => 'getSellerOrderItems',
        'shipment' => 'getShipment',
        'shipping_limit_date' => 'getShippingLimitDate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['approved_at'] = isset($data['approved_at']) ? $data['approved_at'] : null;
        $this->container['availability_days'] = isset($data['availability_days']) ? $data['availability_days'] : null;
        $this->container['channel_slug'] = isset($data['channel_slug']) ? $data['channel_slug'] : null;
        $this->container['channel_store'] = isset($data['channel_store']) ? $data['channel_store'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['estimated_delivery_date'] = isset($data['estimated_delivery_date']) ? $data['estimated_delivery_date'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['payment_methods'] = isset($data['payment_methods']) ? $data['payment_methods'] : null;
        $this->container['purchase_timestamp'] = isset($data['purchase_timestamp']) ? $data['purchase_timestamp'] : null;
        $this->container['seller_brand'] = isset($data['seller_brand']) ? $data['seller_brand'] : null;
        $this->container['seller_email'] = isset($data['seller_email']) ? $data['seller_email'] : null;
        $this->container['seller_id'] = isset($data['seller_id']) ? $data['seller_id'] : null;
        $this->container['seller_name'] = isset($data['seller_name']) ? $data['seller_name'] : null;
        $this->container['seller_order_items'] = isset($data['seller_order_items']) ? $data['seller_order_items'] : null;
        $this->container['shipment'] = isset($data['shipment']) ? $data['shipment'] : null;
        $this->container['shipping_limit_date'] = isset($data['shipping_limit_date']) ? $data['shipping_limit_date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['approved_at'] === null) {
            $invalid_properties[] = "'approved_at' can't be null";
        }
        if ($this->container['channel_slug'] === null) {
            $invalid_properties[] = "'channel_slug' can't be null";
        }
        if ($this->container['channel_store'] === null) {
            $invalid_properties[] = "'channel_store' can't be null";
        }
        if ($this->container['customer'] === null) {
            $invalid_properties[] = "'customer' can't be null";
        }
        if ($this->container['order_id'] === null) {
            $invalid_properties[] = "'order_id' can't be null";
        }
        if ($this->container['payment_methods'] === null) {
            $invalid_properties[] = "'payment_methods' can't be null";
        }
        if ($this->container['purchase_timestamp'] === null) {
            $invalid_properties[] = "'purchase_timestamp' can't be null";
        }
        if ($this->container['seller_id'] === null) {
            $invalid_properties[] = "'seller_id' can't be null";
        }
        if ($this->container['seller_name'] === null) {
            $invalid_properties[] = "'seller_name' can't be null";
        }
        if ($this->container['seller_order_items'] === null) {
            $invalid_properties[] = "'seller_order_items' can't be null";
        }
        if ($this->container['shipping_limit_date'] === null) {
            $invalid_properties[] = "'shipping_limit_date' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['approved_at'] === null) {
            return false;
        }
        if ($this->container['channel_slug'] === null) {
            return false;
        }
        if ($this->container['channel_store'] === null) {
            return false;
        }
        if ($this->container['customer'] === null) {
            return false;
        }
        if ($this->container['order_id'] === null) {
            return false;
        }
        if ($this->container['payment_methods'] === null) {
            return false;
        }
        if ($this->container['purchase_timestamp'] === null) {
            return false;
        }
        if ($this->container['seller_id'] === null) {
            return false;
        }
        if ($this->container['seller_name'] === null) {
            return false;
        }
        if ($this->container['seller_order_items'] === null) {
            return false;
        }
        if ($this->container['shipping_limit_date'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets approved_at
     * @return string
     */
    public function getApprovedAt()
    {
        return $this->container['approved_at'];
    }

    /**
     * Sets approved_at
     * @param string $approved_at Approved Status Date and time
     * @return $this
     */
    public function setApprovedAt($approved_at)
    {
        $this->container['approved_at'] = $approved_at;

        return $this;
    }

    /**
     * Gets availability_days
     * @return int
     */
    public function getAvailabilityDays()
    {
        return $this->container['availability_days'];
    }

    /**
     * Sets availability_days
     * @param int $availability_days Max availability days from all items
     * @return $this
     */
    public function setAvailabilityDays($availability_days)
    {
        $this->container['availability_days'] = $availability_days;

        return $this;
    }

    /**
     * Gets channel_slug
     * @return string
     */
    public function getChannelSlug()
    {
        return $this->container['channel_slug'];
    }

    /**
     * Sets channel_slug
     * @param string $channel_slug Channel slug
     * @return $this
     */
    public function setChannelSlug($channel_slug)
    {
        $this->container['channel_slug'] = $channel_slug;

        return $this;
    }

    /**
     * Gets channel_store
     * @return string
     */
    public function getChannelStore()
    {
        return $this->container['channel_store'];
    }

    /**
     * Sets channel_store
     * @param string $channel_store Channels Store
     * @return $this
     */
    public function setChannelStore($channel_store)
    {
        $this->container['channel_store'] = $channel_store;

        return $this;
    }

    /**
     * Gets customer
     * @return object
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     * @param object $customer Order Customer
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets estimated_delivery_date
     * @return string
     */
    public function getEstimatedDeliveryDate()
    {
        return $this->container['estimated_delivery_date'];
    }

    /**
     * Sets estimated_delivery_date
     * @param string $estimated_delivery_date 
     * @return $this
     */
    public function setEstimatedDeliveryDate($estimated_delivery_date)
    {
        $this->container['estimated_delivery_date'] = $estimated_delivery_date;

        return $this;
    }

    /**
     * Gets order_id
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     * @param string $order_id Order code
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets payment_methods
     * @return string[]
     */
    public function getPaymentMethods()
    {
        return $this->container['payment_methods'];
    }

    /**
     * Sets payment_methods
     * @param string[] $payment_methods Array list of Payment Methods
     * @return $this
     */
    public function setPaymentMethods($payment_methods)
    {
        $this->container['payment_methods'] = $payment_methods;

        return $this;
    }

    /**
     * Gets purchase_timestamp
     * @return string
     */
    public function getPurchaseTimestamp()
    {
        return $this->container['purchase_timestamp'];
    }

    /**
     * Sets purchase_timestamp
     * @param string $purchase_timestamp Order Purchase Date and time
     * @return $this
     */
    public function setPurchaseTimestamp($purchase_timestamp)
    {
        $this->container['purchase_timestamp'] = $purchase_timestamp;

        return $this;
    }

    /**
     * Gets seller_brand
     * @return string
     */
    public function getSellerBrand()
    {
        return $this->container['seller_brand'];
    }

    /**
     * Sets seller_brand
     * @param string $seller_brand 
     * @return $this
     */
    public function setSellerBrand($seller_brand)
    {
        $this->container['seller_brand'] = $seller_brand;

        return $this;
    }

    /**
     * Gets seller_email
     * @return string
     */
    public function getSellerEmail()
    {
        return $this->container['seller_email'];
    }

    /**
     * Sets seller_email
     * @param string $seller_email 
     * @return $this
     */
    public function setSellerEmail($seller_email)
    {
        $this->container['seller_email'] = $seller_email;

        return $this;
    }

    /**
     * Gets seller_id
     * @return string
     */
    public function getSellerId()
    {
        return $this->container['seller_id'];
    }

    /**
     * Sets seller_id
     * @param string $seller_id Seller code
     * @return $this
     */
    public function setSellerId($seller_id)
    {
        $this->container['seller_id'] = $seller_id;

        return $this;
    }

    /**
     * Gets seller_name
     * @return string
     */
    public function getSellerName()
    {
        return $this->container['seller_name'];
    }

    /**
     * Sets seller_name
     * @param string $seller_name Seller name
     * @return $this
     */
    public function setSellerName($seller_name)
    {
        $this->container['seller_name'] = $seller_name;

        return $this;
    }

    /**
     * Gets seller_order_items
     * @return string[]
     */
    public function getSellerOrderItems()
    {
        return $this->container['seller_order_items'];
    }

    /**
     * Sets seller_order_items
     * @param string[] $seller_order_items Array list of Order Products
     * @return $this
     */
    public function setSellerOrderItems($seller_order_items)
    {
        $this->container['seller_order_items'] = $seller_order_items;

        return $this;
    }

    /**
     * Gets shipment
     * @return object
     */
    public function getShipment()
    {
        return $this->container['shipment'];
    }

    /**
     * Sets shipment
     * @param object $shipment Order shipment
     * @return $this
     */
    public function setShipment($shipment)
    {
        $this->container['shipment'] = $shipment;

        return $this;
    }

    /**
     * Gets shipping_limit_date
     * @return string
     */
    public function getShippingLimitDate()
    {
        return $this->container['shipping_limit_date'];
    }

    /**
     * Sets shipping_limit_date
     * @param string $shipping_limit_date Limit date to send the Order
     * @return $this
     */
    public function setShippingLimitDate($shipping_limit_date)
    {
        $this->container['shipping_limit_date'] = $shipping_limit_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


